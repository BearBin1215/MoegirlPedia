{"version":3,"file":"BotTasks.min.js","sources":["webpack://bearbin-moegirlpedia/webpack/runtime/rspack_version","webpack://bearbin-moegirlpedia/webpack/runtime/rspack_unique_id","webpack://bearbin-moegirlpedia/./src/utils/wait.ts","webpack://bearbin-moegirlpedia/./src/utils/api/categoryMembers.ts","webpack://bearbin-moegirlpedia/./src/gadgets/BotTasks/index.ts"],"sourcesContent":["__webpack_require__.rv = () => (\"1.4.2\")","__webpack_require__.ruid = \"bundler=rspack@1.4.2\";\n","/**\n * 同步延时\n * @param time 等待时间\n */\nconst waitInterval = (time: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, time));\n};\n\nexport default waitInterval;\n","import type { Cmtype, ApiQueryResponse } from \"@/@types/api\";\n\n/**\n * 获取分类成员，有权限用户使用api，无权限用户使用ajax。\n *\n * @param cmtitle 分类名\n * @param cmtype 获取类型\n * @returns 页面列表\n */\nconst getCategoryMembers = async (cmtitle: string, cmtype: Cmtype[] = ['page', 'subcat', 'file']) => {\n  const api = new mw.Api();\n  const pageList: string[] = [];\n  // 有api权限的用户通过API获取，无权限用户通过ajax获取\n  if (mw.config.get('wgUserGroups')!.some((group) => ['bot', 'flood', 'patroller', 'sysop'].includes(group))) {\n    let cmcontinue: string | undefined = '';\n    while (cmcontinue !== undefined) {\n      const result = await api.post({\n        action: 'query',\n        format: 'json',\n        utf8: true,\n        list: 'categorymembers',\n        cmlimit: 'max',\n        cmtitle,\n        cmprop: 'title',\n        cmtype,\n        cmcontinue,\n      }) as ApiQueryResponse;\n      if (result.query.categorymembers[0]) {\n        pageList.push(...result.query.categorymembers.map(({ title }) => title));\n      }\n      cmcontinue = result.continue?.cmcontinue;\n    }\n  } else {\n    /**\n     * 对于未持有对应用户组的用户，通过ajax递归获取分类成员\n     * @param {string} link\n     */\n    const getCategoryMembersByAjax = async (link: string) => {\n      const $ajaxResult = $(await $.ajax(link));\n      const selector = cmtype.map((type) => {\n        switch (type) {\n          case 'page':\n            return '#mw-pages li a';\n          case 'subcat':\n            return '#mw-subcategories li a';\n          case 'file':\n            return '#mw-category-media li a.galleryfilename';\n        }\n      }).join(',');\n\n      // 将分类内的页面加入列表\n      const members = $ajaxResult.find(selector).map((_, ele) => {\n        if (ele.classList.contains('CategoryTreeLabel')) {\n          return `Category:${$(ele).text()}`;\n        } else if (ele.classList.contains('galleryfilename')) {\n          return `File:${$(ele).text()}`;\n        }\n        return $(ele).text();\n      }).get();\n      pageList.push(...members);\n\n      // 获取下一页分类内页面\n      if (cmtype.includes('page')) {\n        const $pageContinueLink = $ajaxResult.find('a[href*=\"&pagefrom=\"]');\n        if ($pageContinueLink.length) {\n          await getCategoryMembersByAjax($pageContinueLink.eq(0).attr('href')!);\n        }\n      }\n\n      // 获取下一页子分类\n      if (cmtype.includes('subcat')) {\n        const $catContinueLink = $ajaxResult.find('a[href*=\"&subcatfrom=\"]');\n        if ($catContinueLink.length) {\n          await getCategoryMembersByAjax($catContinueLink.eq(0).attr('href')!);\n        }\n      }\n\n      // 获取下一页分类文件\n      if (cmtype.includes('file')) {\n        const $catContinueLink = $ajaxResult.find('a[href*=\"&filefrom=\"]');\n        if ($catContinueLink.length) {\n          await getCategoryMembersByAjax($catContinueLink.eq(0).attr('href')!);\n        }\n      }\n    };\n\n    await getCategoryMembersByAjax(`/${cmtitle}?useskin=vector&safemode=1`);\n  }\n  return pageList;\n};\n\nexport const traverseCategoryMembers = async (cmtitle: string) => {\n  const traversedCategoryList: string[] = [];\n\n  const traverseCategory = async (category: string) => {\n    const api = new mw.Api();\n    const pageList: string[] = [];\n    let gcmcontinue: string | undefined = '';\n    while (gcmcontinue !== undefined) {\n      const response = await api.post({\n        action: 'query',\n        generator: 'categorymembers',\n        gcmtitle: category,\n        gcmtype: 'page|subcat',\n        gcmlimit: 'max',\n        gcmcontinue,\n      }) as ApiQueryResponse;\n      gcmcontinue = response.continue?.gcmcontinue;\n      for (const { ns, title } of Object.values(response.query.pages)) {\n        if (ns === 14 && !traversedCategoryList.includes(title)) {\n          traversedCategoryList.push(title); // 避免套娃\n          pageList.push(...await traverseCategory(title));\n        } else {\n          pageList.push(title);\n        }\n      }\n      console.log(`\\x1B[4m${category}\\x1B[0m下查找到\\x1B[4m${pageList.length}\\x1B[0m个页面`);\n    }\n    return [...new Set(pageList)];\n  };\n\n  return await traverseCategory(cmtitle);\n};\n\nexport default getCategoryMembers;\n","import waitInterval from '@/utils/wait';\r\nimport { categoryMembers } from '@/utils/api';\r\nimport type { ApiQueryResponse, ApiQueryPageInfo } from '@/@types/api';\r\n\r\ntype PF = (text: string, categories: string[], title: string) => void;\r\n\r\ninterface Page {\r\n  text: string;\r\n  categories: string[];\r\n}\r\n\r\ninterface PageData {\r\n  [key: string]: (string | [string, string])[] | PageData;\r\n}\r\n\r\n$(() => (async () => {\r\n  await mw.loader.using(['mediawiki.api']);\r\n\r\n  class MessOutput {\r\n    data: PageData;\r\n\r\n    /**\r\n     * 创建MessOutput对象\r\n     * @param data 初始化列表\r\n     */\r\n    constructor(data: PageData) {\r\n      this.data = data; // 用将导入的data初始化\r\n    }\r\n\r\n    /**\r\n     * 遍历data广度优先搜索标题，并在对应的列表插入新页面名\r\n     * @param headline 标题\r\n     * @param page 要插入的页面名，或页面名和附加信息组成的数组\r\n     */\r\n    addPageToList(headline: string, page: string | [string, string]) {\r\n      const queue: { obj: object, path: string[] }[] = [{ obj: this.data, path: [] }];\r\n      while (queue.length > 0) {\r\n        const { obj, path } = queue.shift()!;\r\n        for (const [key, val] of Object.entries(obj)) {\r\n          if (key === headline) {\r\n            if (Array.isArray(val)) {\r\n              val.push(page);\r\n              return;\r\n            }\r\n            console.error(`${headline}不是数组。`);\r\n            return;\r\n          }\r\n          if (typeof val === 'object' && val !== null) {\r\n            queue.push({ obj: val, path: [...path, key] });\r\n          }\r\n        }\r\n      }\r\n      this.data[headline] = [page];\r\n    }\r\n\r\n    /** 输出wikitext */\r\n    get wikitext() {\r\n      let listLevel = 1;\r\n      const textList = [\r\n        '本页面由机器人自动更新，因此通常不建议直接编辑本页面。',\r\n        '',\r\n        '最后更新时间：<u>~~~~~</u>，约15分钟误差。',\r\n        '',\r\n        '大多数内容建议手动排查，以免误判。',\r\n        '',\r\n        '一些常见误判诸如在非页顶使用{{tl|dablink}}等情况。若出现其他误判，请[[User_talk:BearBin|联系阿熊]]。',\r\n        '{{目录右置}}',\r\n      ];\r\n      /**\r\n       * 递归函数\r\n       * @param obj this.data\r\n       */\r\n      const addListToTextList = (obj: PageData) => {\r\n        listLevel++;\r\n        for (const [headline, pages] of Object.entries(obj)) {\r\n          // 标题\r\n          textList.push('', `${'='.repeat(listLevel)} ${headline} ${'='.repeat(listLevel)}`);\r\n          // 列表\r\n          if (Array.isArray(pages)) {\r\n            if (pages.length > 0) {\r\n              textList.push(\r\n                '{{hide|1=点击展开列表|2=', // 折叠模板\r\n                ...pages.map((page) => {\r\n                  if (typeof page === 'string') {\r\n                    return `*[[${page}]]`; // 无附加内容\r\n                  }\r\n                  return `*-{[[${page[0]}]]}-：${page[1]}`; // 有附加内容\r\n                }),\r\n                '}}',\r\n              );\r\n            } else {\r\n              textList.push('暂无');\r\n            }\r\n          } else if (typeof pages === 'object' && pages !== null) {\r\n            addListToTextList(pages);\r\n          } else {\r\n            throw new Error(`${headline}对应值类型有误: ${typeof pages}`);\r\n          }\r\n        }\r\n        listLevel--;\r\n      };\r\n      addListToTextList(this.data);\r\n      return textList.join('\\n');\r\n    }\r\n  }\r\n\r\n\r\n  // 初始化MessOuput\r\n  const messOutput = new MessOutput({\r\n    消歧义页使用管道符: {\r\n      后缀: [],\r\n      前缀: [],\r\n    },\r\n    疑似繁体页面名: [],\r\n    不礼貌排版习惯: {\r\n      连续换行: [],\r\n      'big地狱（5个以上）': [],\r\n      疑似大家族前单独用二级标题: [],\r\n      疑似喊话: [],\r\n    },\r\n    弃用标签: {\r\n      center: [],\r\n      strike: [],\r\n      tt: [],\r\n      font: [],\r\n    },\r\n    能用内链非要外链: [],\r\n    不符合模板规范: {\r\n      重复TOP: [],\r\n      页顶用图超过99px: {\r\n        条目: [],\r\n        模板: [],\r\n      },\r\n      顶部模板排序: [],\r\n      注释和外部链接后的大家族模板: [],\r\n    },\r\n    大家族name参数有误: [],\r\n    模板多余换行: {\r\n      两个或以上: [],\r\n      一个: [],\r\n    },\r\n    '“•”左右少空格': {\r\n      左侧缺少: [],\r\n      右侧缺少: [],\r\n    },\r\n    '管道符前后一致（无明显影响，通常不用专门处理）': {\r\n      '<nowiki>[[ABC|ABC]]</nowiki>': [],\r\n      '<nowiki>|ABC{{!}}ABC</nowiki>': [],\r\n    },\r\n    旧声优分类格式: [],\r\n    'http(s)少冒号或斜杠': [],\r\n  });\r\n\r\n\r\n  // 模板及其别名\r\n  const Templates = {\r\n    prefix: '\\\\{\\\\{(?:template:|[模样樣]板:|T:)?',\r\n\r\n    // 导航条\r\n    navbar: [\r\n      '小[导導]航[条條]',\r\n      '小[导導]航[条條]\\\\/承前[启啟][后後]',\r\n    ],\r\n\r\n    // 消歧义导航模板\r\n    disambigTop: [\r\n      'about',\r\n      'not',\r\n      'distinguish',\r\n      'dablink',\r\n      'redirectHere',\r\n      'otheruseslist',\r\n    ],\r\n\r\n    // 欢迎编辑及TOP\r\n    top: [\r\n      '[欢歡]迎[编編][辑輯]',\r\n      '不完整',\r\n      '急需改[进進]',\r\n      '[^{|\\\\[\\\\]]+top',\r\n    ],\r\n\r\n    // T:消歧义\r\n    disambig: [\r\n      '消歧[义義]',\r\n    ],\r\n\r\n    // 提示模板\r\n    note: [\r\n      // \"敏感[内內]容\",\r\n      '[现現][实實]人物',\r\n      // \"R-15\",\r\n    ],\r\n\r\n    // 警告模板\r\n    warn: [\r\n      '法律声明',\r\n      // \"刑法\",\r\n      '医学声明',\r\n      '学术提示',\r\n      '非官方猜测',\r\n      '易引发谣言',\r\n      '用梗适度',\r\n      '谨慎使用',\r\n    ],\r\n\r\n    // 其他提示模板\r\n    otherNote: [\r\n      '已故现实人物',\r\n      '已完结',\r\n      '长期关注及更新',\r\n      '含时长期关注及更新',\r\n      '停止活动',\r\n      '引退',\r\n    ],\r\n\r\n    // 娱乐页顶模板\r\n    amuse: [\r\n      '阿卡林',\r\n      '被巡回',\r\n      '黑幕可能无法划开',\r\n      '暂时保留',\r\n      '一本正经地胡说八道',\r\n      '坑',\r\n    ],\r\n\r\n    // 喊话模板\r\n    quote: [\r\n      'cquote',\r\n      '先一起喊',\r\n    ],\r\n\r\n    // 底部模板，用来检测大家族模板位置错误或单独二级标题时排除特定模板\r\n    bottom: [\r\n      // 注释模板\r\n      'reflist',\r\n      'notelist',\r\n      'NoteFoot',\r\n      'notes',\r\n      'cite',\r\n\r\n      // 外部链接模板\r\n      '到萌娘文[库庫]',\r\n      '到[维維]基百科',\r\n      'ToWikipedia',\r\n      '到FANDOM',\r\n      '到纳木维基',\r\n      '到VNDB',\r\n      'To BWIKI',\r\n      'To 52poke Wiki',\r\n      'To Megami Tensei Wiki',\r\n      '到灰[机機]wiki',\r\n      '到泰拉瑞[亚亞]Wiki',\r\n      '到泰拉瑞亚MODWiki',\r\n      '到MC百科',\r\n      '到Minecraft Wiki',\r\n      '到魔禁[维維]基',\r\n      '到THBWiki',\r\n      '到BlitzHanger',\r\n      '到女神[转轉]生[维維]基',\r\n      'To Megami Tensei Wiki',\r\n      '到MLP中文[维維]基',\r\n      '到PvZ Wiki',\r\n      '微博',\r\n\r\n      // 魔术字\r\n      'PAGENAME',\r\n      'DEFAULTSORT',\r\n      '#if',\r\n      '#switch',\r\n\r\n      // 常用\r\n      'lj\\\\|',\r\n      'color\\\\|',\r\n      'ruby\\\\|',\r\n      'hide\\\\|',\r\n      '[剧劇]透',\r\n      '黑幕',\r\n      '胡话',\r\n      'jk\\\\|',\r\n      'main\\\\|',\r\n      'ja\\\\}',\r\n      'en\\\\}',\r\n      'zh\\\\}',\r\n      'zh-hans',\r\n      'zh-hant',\r\n      'lang\\\\|',\r\n      'cquote',\r\n      'Ps\\\\|',\r\n\r\n      // 其他\r\n      'catn',\r\n      'ColonSort',\r\n      'bilibiliVideo',\r\n      'BV',\r\n      'YoukuVideo',\r\n      'music163',\r\n      '背景[图圖]片',\r\n      '替[换換][侧側][边邊][栏欄]底[图圖]',\r\n      '外部[图圖]片注[释釋]',\r\n      '[标標][题題]替[换換]',\r\n      'PicHover',\r\n      'Outer[ _]image',\r\n      'pic\\\\|',\r\n      'disambig',\r\n      'Playlist',\r\n      '消歧义页',\r\n      'NoSubpage',\r\n      'noReferer',\r\n      '用梗适度',\r\n      '一本正经地胡说八道',\r\n      'color[ _]block',\r\n      'RoundTop',\r\n      'see also',\r\n    ],\r\n  };\r\n\r\n\r\n  // 页顶提示模板\r\n  let topTipTemplate: string[];\r\n\r\n\r\n  /**\r\n   * ------------------------------\r\n   * 辅助函数，用于后续具体检查函数\r\n   * ------------------------------\r\n   */\r\n\r\n  /**\r\n   * 查找正则表达式的匹配在字符串中的位置集\r\n   * @param str 要查找的字符串\r\n   * @param reg 正则表达式\r\n   * @returns 匹配位置组成的集合\r\n   */\r\n  const regexPosition = (str: string, reg: RegExp) => {\r\n    let match: RegExpExecArray | null;\r\n    const indexes: number[] = [];\r\n    while ((match = reg.exec(str)) !== null) {\r\n      indexes.push(match.index);\r\n    }\r\n    return indexes;\r\n  };\r\n\r\n\r\n  /**\r\n   * 查找模板在文本中的位置\r\n   * @param text 页面源代码\r\n   * @param  templates 模板及其别名\r\n   * @returns 模板位置集合\r\n   * @example templateIndex(\"{{欢迎编辑|补充内容}}{{消歧义}}{{电子游戏TOP}}\", ...Templates.top) => [0, 20];\r\n   */\r\n  const templateIndex = (text: string, ...templates: string[]): number[] => regexPosition(text, new RegExp(`${Templates.prefix}(${templates.join('|')})[}\\\\|\\\\n]`, 'gi'));\r\n\r\n\r\n  /**\r\n   * 检查多个数组是否前一个均小于后一个，用于检查顶部模板顺序\r\n   * @param arrays 数组列表\r\n   * @returns 位置有误的模板排序\r\n   */\r\n  const checkOrder = (arrays: number[][]): number => {\r\n    for (let i = 0; i < arrays.length - 1; i++) {\r\n      const maxA = Math.max(...arrays[i].filter((num) => num <= 600));\r\n      for (let j = i + 1; j < arrays.length; j++) {\r\n        const minB = Math.min(...arrays[j].filter((num) => num <= 600));\r\n        if (maxA >= minB) {\r\n          return j;\r\n        }\r\n      }\r\n    }\r\n    return 0;\r\n  };\r\n\r\n\r\n\r\n  /**\r\n   * ------------------------------\r\n   * 具体检查函数（主名字空间）\r\n   * ------------------------------\r\n   */\r\n\r\n  /** 检查消歧义页内中的管道符 */\r\n  const pipeInDisambig: PF = (text, categories, title) => {\r\n    if (categories.includes('Category:消歧义页')) {\r\n      const prefix = text.match(/\\[\\[(.+)\\(.+\\)\\|\\1\\]\\].*—/);\r\n      const suffix = text.match(/\\[\\[[^:\\n].*:(.+)\\|\\1\\]\\].*—/);\r\n      if (prefix) {\r\n        messOutput.addPageToList('后缀', [title, `<code><nowiki>${prefix[0].replaceAll('—', '')}</nowiki></code>`]);\r\n      } else if (suffix) {\r\n        messOutput.addPageToList('前缀', [title, `<code><nowiki>${suffix[0].replaceAll('—', '')}</nowiki></code>`]);\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  /** 在页面中查找重复出现的大量换行 */\r\n  const wrapDetector: PF = (text, categories, title) => {\r\n    if (categories.some((category) => category.includes('音乐作品'))) { return; } // 排除音乐条目\r\n    if (/(<br *\\/ *>\\s*){4,}/i.test(text) || /(\\n|<br *\\/? *>){8}/i.test(text)) {\r\n      messOutput.addPageToList('连续换行', title);\r\n    }\r\n  };\r\n\r\n\r\n  /** 检测连续出现的big */\r\n  const bigDetector: PF = (text, _categories, title) => {\r\n    if (/(<big>){5}/i.test(text)) {\r\n      messOutput.addPageToList('big地狱（5个以上）', title);\r\n    }\r\n  };\r\n\r\n\r\n  /** 能用内链非要用外链 */\r\n  const innerToOuter: PF = (text, _categories, title) => {\r\n    if ((new RegExp(`${Templates.prefix}(背景[图圖]片|替[换換][侧側][边邊][栏欄]底[图圖])[^}]+img\\\\.moegirl\\\\.org\\\\.cn`, 'si')).test(text) && title !== 'Deltarune/黑暗世界') {\r\n      messOutput.addPageToList('能用内链非要外链', title);\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * 检查大家族前疑似单独使用二级标题的页面\r\n   * @todo 将判定方法改为发现疑似页面后判定模板是否为导航模板\r\n   */\r\n  const headlineBeforeNav: PF = (text, _categories, title) => {\r\n    if (new RegExp(`== *(相关|更多|其他|其它)(条目|條目|内容|链接)? *==\\n*${Templates.prefix}((?!${Templates.bottom.join('|')}).)*\\\\}`, 'gi').test(text)) {\r\n      messOutput.addPageToList('疑似大家族前单独用二级标题', title);\r\n    }\r\n  };\r\n\r\n\r\n  /** 位于注释或外部链接之后的大家族模板 */\r\n  const refBeforeNav: PF = (text, _categories, title) => {\r\n    if (new RegExp(`== *(脚注|[注註]解|注释|註釋|外部[链鏈]接|外部連結|外链|[参參]考).*==[\\\\s\\\\S]*\\n${Templates.prefix}((?!${Templates.bottom.join('|')}).)*\\\\}`, 'gi').test(text)) {\r\n      messOutput.addPageToList('注释和外部链接后的大家族模板', title);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  /** 检查疑似喊话内容 */\r\n  const redBoldText: PF = (text, _categories, title) => {\r\n    if (\r\n      /\\{\\{color\\|red\\|'''[^}|]{50,}'''\\}\\}/i.test(text) ||\r\n      /'''\\{\\{color\\|red\\|[^}|]{50,}\\}\\}'''/i.test(text)\r\n    ) {\r\n      messOutput.addPageToList('疑似喊话', title);\r\n    }\r\n  };\r\n\r\n\r\n  /** 检查重复TOP */\r\n  const repetitiveTop: PF = (text, _categories, title) => {\r\n    const topPattern = new RegExp(`${Templates.prefix}(${Templates.top.join('|')})[}\\\\|\\\\n]`, 'gi');\r\n    const useTemplates = text.match(topPattern) || [];\r\n    let usedTops = 0;\r\n    for (const item of useTemplates) {\r\n      // 部分名字以top结尾的模板可能并不是页顶，需要排除\r\n      if (topTipTemplate.includes(item.replace(topPattern, '$1'))) {\r\n        usedTops++;\r\n      }\r\n    }\r\n    if (usedTops > 1) {\r\n      messOutput.addPageToList('重复TOP', title);\r\n    }\r\n  };\r\n\r\n\r\n  /** 检查用图超过99px的页顶模板 */\r\n  const imgLT99px: PF = (text, _categories, title) => {\r\n    if (\r\n      /leftimage *=[.\\n]*\\d{3}px/.test(text) ||\r\n      /\\{\\{(?:template:|[模样樣]板:|T:)?(欢迎编辑|歡迎編輯|不完整|customtop).*\\d{3}px/i.test(text)\r\n    ) {\r\n      messOutput.addPageToList('条目', title);\r\n    }\r\n  };\r\n\r\n\r\n  /** 检查页顶模板排序 */\r\n  const templateOrder: PF = (text, _categories, title) => {\r\n    const templateIndexes = {\r\n      消歧义导航模板: templateIndex(text, ...Templates.disambigTop), // 消歧义导航模板\r\n      专题导航导航: templateIndex(text, '导航'), // 专题导航\r\n      导航条: templateIndex(text, ...Templates.navbar), // 导航条\r\n      '{{tl|消歧义}}': templateIndex(text, ...Templates.disambig), // 消歧义\r\n      欢迎编辑或专题TOP: templateIndex(text, ...Templates.top), // 欢迎编辑、各类TOP\r\n      提示模板: templateIndex(text, ...Templates.note), // 提示模板\r\n      娱乐模板: templateIndex(text, ...Templates.amuse), // 娱乐模板\r\n      喊话模板: templateIndex(text, ...Templates.quote), // 喊话模板\r\n    };\r\n    const wrongTemplate = checkOrder(Object.values(templateIndexes));\r\n    if (wrongTemplate > 0) {\r\n      messOutput.addPageToList('顶部模板排序', [title, `<code>${Object.keys(templateIndexes)[wrongTemplate]}</code>`]);\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * ------------------------------\r\n   * 具体检查函数（模板名字空间）\r\n   * ------------------------------\r\n   */\r\n\r\n  /** 检查用图超过99px的页顶模板 */\r\n  const imgLT99pxInTemplate: PF = (text, categories, title) => {\r\n    if (categories.includes('Category:页顶提示模板') && (\r\n      /leftimage *=.*\\d{3}px/.test(text) ||\r\n      /(width|size) *= *\\d{3}px/.test(text) ||\r\n      /\\[\\[(File|Image):[^\\]]+\\| *\\d{3}px/i.test(text)\r\n    )) {\r\n      messOutput.addPageToList('模板', title);\r\n    }\r\n  };\r\n\r\n\r\n  /** 检查模板中的多余换行 */\r\n  const redundantWrapInTemplate: PF = (text, categories, title) => {\r\n    if (categories.some((category) => ['Category:模板文档', 'Category:条目格式模板', 'Category:权限申请模板'].includes(category))) {\r\n      return;\r\n    }\r\n    if (/(\\n{2,}<noinclude>|<\\/noinclude>\\n{2,}[^|]|<includeonly>\\n{2,}|\\n{2,}<\\/includeonly>)/.test(text)) {\r\n      messOutput.addPageToList('两个或以上', title);\r\n    } else if (/(\\n<noinclude>|<\\/noinclude>\\n|<includeonly>\\n|\\n<\\/includeonly>)/.test(text)) {\r\n      messOutput.addPageToList('一个', title);\r\n    }\r\n  };\r\n\r\n  /** •左右缺少空格 */\r\n  const needSpaceBesidesPoint: PF = (text, categories, title) => {\r\n    if (categories.includes('Category:用户编辑组模板')) {\r\n      return;\r\n    }\r\n    const left = text.match(/([^\\]\\n]+\\]\\]|[^}\\n]+\\}\\})•/);\r\n    const right = text.match(/•(\\[\\[[^\\]\\n]+|\\{\\{[^}\\n]+)/);\r\n    if (left) {\r\n      messOutput.addPageToList('左侧缺少', [title, `<code><nowiki>${left[0]}</nowiki></code>`]);\r\n    }\r\n    if (right) {\r\n      messOutput.addPageToList('右侧缺少', [title, `<code><nowiki>${right[0]}</nowiki></code>`]);\r\n    }\r\n  };\r\n\r\n  /** 管道符前一致 */\r\n  const redundantPipe: PF = (text, _categories, title) => {\r\n    const normal = text.match(/\\[\\[ *([^\\]]+) *\\| *\\1 *\\]\\]/);\r\n    const escape = text.match(/\\| *([^\\]{}}]+) *\\{\\{!\\}\\} *\\1 *(\\||\\})/);\r\n    if (normal) {\r\n      messOutput.addPageToList('<nowiki>[[ABC|ABC]]</nowiki>', [title, `<code><nowiki>${normal[0]}</nowiki></code>`]);\r\n    }\r\n    if (escape) {\r\n      messOutput.addPageToList('<nowiki>|ABC{{!}}ABC</nowiki>', [title, `<code><nowiki>${escape[0]}</nowiki></code>`]);\r\n    }\r\n  };\r\n\r\n  /** 可能需要补充“配音角色” */\r\n  const oldCVCategory: PF = (text, _categories, title) => {\r\n    const match = text.match(/\\|多位(配音|声优) *= *\\{\\{cate\\|[^{}|]+\\|[^{}[\\]\\n]+[^色{}[\\]\\n](\\}\\}|\\|)/gi);\r\n    if (match) {\r\n      messOutput.addPageToList('旧声优分类格式', [title, `<code><nowiki>${match[0]}</nowiki></code>`]);\r\n    }\r\n  };\r\n\r\n  /** navbox中的错误name参数 */\r\n  const wrongNavName: PF = (text, categories, title) => {\r\n    const nameParam = text.match(/\\| *name *= *[^|\\n]*/gi) || [];\r\n    if (\r\n      categories.includes('Category:模板文档') ||\r\n      !text.match(/\\{\\{ *(?:#invoke:|Template:|T:|模板:|样板:)? *(大家族|Nav)/gi) ||\r\n      /:(沙盒|Sandbox|Navbox|大家族$)/.test(title) ||\r\n      !nameParam\r\n    ) {\r\n      return;\r\n    }\r\n    for (const match of nameParam) {\r\n      if (match.replace(/\\| *name *= *([^|\\n]*)/g, '$1').replaceAll('_', ' ').trim().toLowerCase() !== title.replace('Template:', '').toLowerCase()) {\r\n        messOutput.addPageToList('大家族name参数有误', [title, `<code><nowiki>${match}</nowiki></code>`]);\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  /** 检查http(s)少冒号或斜杠 */\r\n  const httpColon: PF = (text, _categories, title) => {\r\n    const http = text.match(/[^/]https?(\\/\\/|:\\/[a-zA-Z0-9])/gi);\r\n    if (http) {\r\n      messOutput.addPageToList('http(s)少冒号或斜杠', [title, `<code><nowiki>${http[0]}</nowiki></code>`]);\r\n    }\r\n  };\r\n\r\n  /** 检查弃用的标签 */\r\n  const deprecatedTags: PF = (text, _categories, title) => {\r\n    const deprecatedRegexes = [\r\n      { tag: 'center', regex: /<(center)(?:\\s[^>]*)?>|<\\/center>/gi },\r\n      { tag: 'tt', regex: /<(tt)(?:\\s[^>]*)?>|<\\/tt>/gi },\r\n      { tag: 'strike', regex: /<(strike)(?:\\s[^>]*)?>|<\\/strike>/gi },\r\n      { tag: 'font', regex: /<(font)(?:\\s[^>]*)?>|<\\/font>/gi },\r\n    ];\r\n\r\n    for (const { tag, regex } of deprecatedRegexes) {\r\n      const match = text.match(regex);\r\n      if (match) {\r\n        if (tag === 'font') {\r\n          messOutput.addPageToList(tag, [title, `<code><nowiki>${match[0]}</nowiki></code>`]);\r\n        } else {\r\n          messOutput.addPageToList(tag, title);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // MWBot实例\r\n  const api = new mw.Api();\r\n\r\n\r\n  /**\r\n   * 遍历所有页面\r\n   * @param functions 执行检查的函数集，这些函数都接受text、categories、title三个参数\r\n   * @param [namespace=0] 要遍历的名字空间\r\n   * @param [maxRetry=10] 最大重试次数\r\n   * @param [limit=500] 单词请求最大页面数\r\n   */\r\n  const traverseAllPages = async (functions: PF[], namespace = 0, maxRetry = 10, limit = 500) => {\r\n    let count = 0;\r\n    let pages: Record<string, Page> = {};\r\n    let reported = false; // 标记是否已报错，用于控制台输出显示\r\n\r\n    /**\r\n     * 分析pages\r\n     * @param pageList 页面列表\r\n     */\r\n    const processPage = (pageList: ApiQueryPageInfo[]) => {\r\n      for (const { title, revisions, categories } of pageList) {\r\n        pages[title] ||= {\r\n          categories: [],\r\n          text: revisions?.[0]?.['*']?.replace(/<!--[\\s\\S]*?-->/g, '') || '', // 去除注释，以及如果获取到空的revisions就先赋值为空字符串\r\n        }; // 初始化pages中每个页面的对象\r\n        if (revisions?.length > 0) {\r\n          count++;\r\n        }\r\n        if (categories) {\r\n          pages[title].categories.push(...categories.map((item) => item.title));\r\n        }\r\n      }\r\n    };\r\n\r\n    // 初始化请求参数\r\n    const params: Record<string, any> = {\r\n      action: 'query',\r\n      generator: 'allpages',\r\n      gaplimit: limit, // 本来设置为max，但总是aborted，还是控制一下吧\r\n      cllimit: 'max',\r\n      gapnamespace: namespace,\r\n      prop: 'revisions|categories',\r\n      rvprop: 'content',\r\n      utf8: true,\r\n    };\r\n\r\n    // 报错及参数调整以供下次请求\r\n    const resolveError = async (error: any, retryCount: number) => {\r\n      if (!reported) {\r\n        console.log('');\r\n        reported = true;\r\n      }\r\n      console.error(`请求出错：${error}，请求参数：${JSON.stringify(params)}，即将重试(${retryCount}/${maxRetry})`);\r\n      params.gaplimit = Math.ceil(params.gaplimit / 2); // 减少页面数\r\n      await waitInterval(3000);\r\n    };\r\n\r\n    // 固定等待时间\r\n    await waitInterval(7000);\r\n\r\n    // 父循环\r\n    do {\r\n      pages = {}; // 每次父循环获取一次完整的max个页面信息，所以按照父循环为单位处理\r\n\r\n      let res;\r\n      let retryCount = 0; // 设置重试，以免出错一次就要从头再来\r\n      while (retryCount < maxRetry) {\r\n        try {\r\n          res = await api.post(params); // 发送请求\r\n          break;\r\n        } catch (error) {\r\n          await resolveError(error, ++retryCount);\r\n        }\r\n      }\r\n      reported = false;\r\n      params.gaplimit = Math.min(params.gaplimit * 2, limit); // 请求成功后逐渐恢复原有数量\r\n\r\n      processPage(Object.values((res as ApiQueryResponse).query.pages));\r\n\r\n      // 处理continue\r\n      let { gapcontinue, rvcontinue, clcontinue } = res.continue || {};\r\n\r\n      // 有rvcontinue或clcontinue则将其放入params，开始子循环\r\n      while (rvcontinue || clcontinue) {\r\n        if (rvcontinue) {\r\n          params.rvcontinue = rvcontinue;\r\n        }\r\n        if (clcontinue) {\r\n          params.clcontinue = clcontinue;\r\n        }\r\n\r\n        let subRes;\r\n        retryCount = 0;\r\n        while (retryCount < maxRetry) {\r\n          try {\r\n            subRes = await api.post(params);\r\n            break;\r\n          } catch (error) {\r\n            await resolveError(error, ++retryCount);\r\n          }\r\n        }\r\n        reported = false;\r\n        params.gaplimit = Math.min(params.gaplimit * 2, limit); // 请求成功后逐渐恢复原有数量\r\n        processPage(Object.values(subRes.query.pages));\r\n\r\n        // 有gapcontinue则更新并退出子循环\r\n        if (subRes.continue?.gapcontinue) {\r\n          ({ gapcontinue } = subRes.continue);\r\n          Reflect.deleteProperty(params, 'rvcontinue');\r\n          Reflect.deleteProperty(params, 'clcontinue');\r\n          break;\r\n        }\r\n\r\n        let ctn = false;\r\n        if (subRes.continue?.rvcontinue) {\r\n          ({ rvcontinue } = subRes.continue);\r\n          ctn = true;\r\n        }\r\n        if (subRes.continue?.clcontinue) {\r\n          ({ clcontinue } = subRes.continue);\r\n          ctn = true;\r\n        }\r\n        if (!ctn) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      // 都没有，则更新gapcontinue，继续父循环\r\n      params.gapcontinue = gapcontinue;\r\n\r\n      // 根据从参数导入的函数检查源代码\r\n      for (const [title, { text, categories }] of Object.entries(pages)) {\r\n        for (const func of functions) {\r\n          func(text, categories, title);\r\n        }\r\n      }\r\n      console.log(`已遍历\\x1B[4m${count}\\x1B[0m个页面 - params.gapcontinue: ${params.gapcontinue}`);\r\n    } while (params.gapcontinue !== undefined);\r\n  };\r\n\r\n\r\n  /**\r\n   * 获取疑似繁体页面名（from 星海）\r\n   * @param gapnamespace 名字空间\r\n   */\r\n  const getVariantTitles = async (gapnamespace: number | string = 0) => {\r\n    let gapcontinue: string | undefined = '';\r\n    let retryCount = 0;\r\n    do {\r\n      if (retryCount >= 10) {\r\n        throw new Error('获取疑似繁体页面名尝试次数过多。');\r\n      }\r\n      try {\r\n        const res = await api.post({\r\n          action: 'query',\r\n          format: 'json',\r\n          prop: 'info',\r\n          generator: 'allpages',\r\n          inprop: 'varianttitles',\r\n          gapfilterredir: 'nonredirects',\r\n          gaplimit: 'max',\r\n          gapnamespace,\r\n          gapcontinue,\r\n        }) as ApiQueryResponse;\r\n        gapcontinue = res.continue?.gapcontinue;\r\n        for (const { title, varianttitles: { 'zh-cn': titleCN } } of Object.values(res.query.pages)) {\r\n          if (\r\n            !/[ぁ-んァ-ヶ]/.test(title) &&\r\n            title.replace(/^(?:Category|Template):/, '') !== titleCN.replace(/^(?:分类|模板):/, '')\r\n          ) {\r\n            messOutput.addPageToList('疑似繁体页面名', [`:${title}`, `→${titleCN}`]);\r\n          }\r\n        }\r\n      } catch (e) {\r\n        console.log(`获取疑似繁体页面名失败：${e}，正在重试（${retryCount}/10）`);\r\n        retryCount++;\r\n      }\r\n    } while (gapcontinue);\r\n  };\r\n\r\n\r\n  /** 将wikitext提交至萌百 */\r\n  const updatePage = async (maxRetry = 5) => {\r\n    const title = 'User:BearBin/杂物';\r\n    console.log(messOutput.wikitext);\r\n    let retryCount = 0;\r\n    while (retryCount < maxRetry) {\r\n      try {\r\n        await api.postWithToken('csrf', {\r\n          action: 'edit',\r\n          title,\r\n          summary: '自动更新列表',\r\n          text: messOutput.wikitext,\r\n          bot: true,\r\n          tags: 'Bot',\r\n        });\r\n        console.log(`成功保存到\\x1B[4m${title}\\x1B[0m。`);\r\n        return;\r\n      } catch (error) {\r\n        console.error(`保存出错：${error}，即将重试(${++retryCount}/${maxRetry})`);\r\n        await waitInterval(3000);\r\n      }\r\n    }\r\n    throw new Error(`保存到\\x1B[4m${title}\\x1B[0m失败。`);\r\n  };\r\n\r\n\r\n  /**\r\n   * 主函数\r\n   * @param 最大重试次数\r\n   */\r\n  const main = async () => {\r\n    topTipTemplate = (await categoryMembers('Category:页顶提示模板')).map((item) => item.replace('Template:', ''))\r\n      .filter((item) => !['架空历史'].includes(item)); // 获取Category:页顶提示模板内的模板，排除架空历史TOP等\r\n    console.log(`获取到${topTipTemplate.length}个页顶提示模板。`);\r\n\r\n    // 检查主名字空间\r\n    await traverseAllPages([\r\n      pipeInDisambig, // 检查消歧义页模板\r\n      wrapDetector, // 检查过量换行\r\n      bigDetector, // 检查连续<big>\r\n      repetitiveTop, // 检查重复TOP\r\n      imgLT99px, // 检查图片超过99px的页顶模板\r\n      redBoldText, // 检查疑似喊话内容\r\n      headlineBeforeNav, // 检查大家族前的二级标题\r\n      refBeforeNav, // 检查错误大家族模板位置\r\n      templateOrder, // 检查页顶模板顺序\r\n      innerToOuter, // 检查背景图片等模板中的图站外链\r\n      redundantPipe, // 管道符前后内容一致\r\n      oldCVCategory, // 旧的声优分类格式\r\n      httpColon, // 检查http(s)//（少冒号）\r\n      deprecatedTags, // 检查弃用的标签\r\n    ], 0, 20);\r\n    console.log('\\n主名字空间检查完毕。');\r\n\r\n    await traverseAllPages([\r\n      imgLT99pxInTemplate, // 检查查过99px的页顶模板\r\n      redundantWrapInTemplate, // 检查多余换行\r\n      needSpaceBesidesPoint, // 检查•左右缺少的空格\r\n      redundantPipe, // 管道符前后内容一致\r\n      wrongNavName, // 大家族模板中错误的name参数\r\n      deprecatedTags, // 检查弃用的标签\r\n    ], 10, 10);\r\n    console.log('\\n模板名字空间检查完毕。');\r\n\r\n    await getVariantTitles(0);\r\n    console.log('主名字空间疑似繁体命名检查完毕。');\r\n    await getVariantTitles(10);\r\n    console.log('模板名字空间疑似繁体命名检查完毕。');\r\n    await getVariantTitles(14);\r\n    console.log('分类空间疑似繁体命名检查完毕。');\r\n\r\n\r\n    await updatePage(); // 提交至萌百\r\n  };\r\n\r\n  // 执行\r\n  main();\r\n})());\r\n"],"names":["time","Promise","resolve","setTimeout","getCategoryMembers","cmtitle","cmtype","api","mw","pageList","group","cmcontinue","undefined","result","title","getCategoryMembersByAjax","link","$ajaxResult","$","selector","type","members","_","ele","$pageContinueLink","$catContinueLink","topTipTemplate","messOutput","data","headline","page","queue","obj","path","key","val","Object","Array","listLevel","textList","addListToTextList","pages","Error","Templates","templateIndex","text","match","templates","reg","RegExp","indexes","pipeInDisambig","categories","prefix","suffix","wrapDetector","category","bigDetector","_categories","innerToOuter","headlineBeforeNav","refBeforeNav","redBoldText","repetitiveTop","topPattern","useTemplates","usedTops","item","imgLT99px","templateOrder","templateIndexes","wrongTemplate","checkOrder","arrays","i","maxA","Math","num","j","imgLT99pxInTemplate","redundantWrapInTemplate","needSpaceBesidesPoint","left","right","redundantPipe","normal","escape","oldCVCategory","wrongNavName","nameParam","httpColon","http","deprecatedTags","tag","regex","traverseAllPages","functions","namespace","maxRetry","limit","count","reported","processPage","revisions","params","resolveError","error","retryCount","waitInterval","res","gapcontinue","rvcontinue","clcontinue","subRes","Reflect","ctn","func","getVariantTitles","gapnamespace","titleCN","e","updatePage","main","categoryMembers"],"mappings":"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"}